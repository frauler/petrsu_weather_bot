import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import messages
import config

import markups as nav

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.BOT_API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands='start')
async def introduction_message(message: types.Message):
    await message.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –ø–æ–≥–æ–¥–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /gps –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")

# --- –ö–æ–º–∞–Ω–¥–∞ /gps ---
class location(StatesGroup): # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    get = State()
    selects = State()
    language = State()

def get_keyboard():
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard = True)
    button = types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–∂–µ–Ω–∏–µ–º", request_location=True)
    keyboard.add(button)
    return keyboard

@dp.message_handler(commands='gps')
async def cmd_locate_me(message: types.Message):
    await message.answer(text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", reply_markup=get_keyboard())
    await location.get.set()

@dp.message_handler(content_types='location', state = location.get)
async def handle_location(message: types.Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude
    locate = []
    locate.append(lat), locate.append(lon)
    await message.answer(text="–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=nav.weatherMenu)

    async with state.proxy() as data:
        data['location'] = locate
    await location.selects.set()

@dp.message_handler(state = location.selects)
async def bot_messages(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        handle_location = data['location']
    print(handle_location[0], handle_location[1])
    if message.text == "üå§ –ü–æ–≥–æ–¥–∞":
        await message.answer(text=messages.weather(handle_location[0], handle_location[1]), reply_markup=nav.weatherMenu)
    elif message.text == "üí® –í–µ—Ç–µ—Ä":
        await message.answer(text=messages.wind(handle_location[0], handle_location[1]), reply_markup=nav.weatherMenu)
    elif message.text == "üåì –í–æ—Å—Ö–æ–¥ –∏ –∑–∞–∫–∞—Ç":
        await message.answer(text=messages.sun_time(handle_location[0], handle_location[1]), reply_markup=nav.weatherMenu)
    elif message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(text="–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ", reply_markup=nav.weatherMenu)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)